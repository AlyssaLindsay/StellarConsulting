@page "/home"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container py-4">

    <!-- Drop-down Row -->
    <div class="row justify-content-start align-items-end mb-3">
        <div class="col-auto">
            <label class="form-label">Program</label>
            <select class="form-select rounded-pill">
                <option selected>Business Information System</option>
                <option>Option 2</option>
            </select>
        </div>
        <div class="col-auto">
            <label class="form-label">Course</label>
            <select class="form-select rounded-pill">
                <option selected>COMP233 - Object Oriented Programming</option>
                <option>Option 2</option>
            </select>
        </div>
    </div>
    <br />

    <!-- Buttons and Search Row -->
    <div class="row align-items-center mb-4">
        <div class="col">
            <button class="btn btn-secondary shadow-sm rounded-pill px-4">Add New</button>
        </div>
        <div class="col">
            <div class="input-group">
                <input type="text" class="form-control rounded-start-pill" placeholder="Search" />
                <button class="btn btn-purple rounded-end-pill">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col text-end">
            <button class="btn btn-secondary shadow-sm rounded-pill px-4">Course Records</button>
        </div>
    </div>

    <!-- Table -->
    @if (isLoading)
    {
        <p>Loading course outlines...</p>
    }
    else if (courseOutlines?.Count == 0)
    {
        <p>No course outlines found.</p>
    }
    else
    {
        <table class="table table-borderless align-middle">
            <thead class="border-bottom text-purple">
                <tr>
                    <th>Course Name</th>
                    <th>Course Owner</th>
                    <th>Program</th>
                    <th>Status</th>
                    <th class="outline-col">Course Outline</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in courseOutlines)
                {
                    <tr class="border-bottom">
                        <td>@course.CourseName</td>
                        <td>@course.CourseOwner</td>
                        <td>@course.Program</td>
                        <td>@course.Status</td>
                        <td>
                            <button class="btn btn-secondary rounded-pill px-4">View</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<style>
    .text-purple {
        color: #8e44ad;
    }

    .btn-purple {
        background-color: #8e44ad;
        color: white;
        border: none;
    }

        .btn-purple:hover {
            background-color: #732d91;
        }

    .btn-secondary {
        background-color: #888;
        border: none;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #777;
        }

    .form-label {
        font-size: 0.85rem;
        color: #888;
        margin-bottom: 0.25rem;
    }

    .input-group .btn {
        border-left: none;
    }

    .outline-col {
        width: 120px;
        white-space: nowrap;
    }
</style>

@code {
    private List<CourseOutline> courseOutlines = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Not logged in. Please login.");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Get, "api/CourseOutlines");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                courseOutlines = await response.Content.ReadFromJsonAsync<List<CourseOutline>>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to load data: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }

        isLoading = false;
    }

    public class CourseOutline
    {
        public int Id { get; set; }
        public string CourseName { get; set; }
        public string CourseOwner { get; set; }
        public string Program { get; set; }
        public string Status { get; set; }
    }
}
